---
title: "Algorithm Design and Theoretical Basis Description"
subtitle: "Technical Note D2"
author: "Krasen Samardzhiev, Barbara Metzler, Martin Fleischmann, Dani Arribas-Bel"
institute: "Charles University; The Alan Turing Institute"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
  html:
    toc: true
    css: styles.css

bibliography: ../references.bib
---

<!-- This tries to closely match what was promised in the project proposal. -->

# Executive summary

Summary goes here.

# Theoretical basis

Kind of lit review I suppose? Probably could be adapted stuff we have in the proposal.

This report describes in detail the data, the data preprocessing, as well as model selection, training and validation schemes. The background section positions the research in the literature and identifies the drawbacks of current approaches, this study aims to address. It also provides some background on the study area - Central Europe. The data section describes the input, output and target data for the model. The methodology section focuses on the model selection, training and validation approaches.

## Morphometric Classification Homogenisation

The spatial layout of the physical elements of cities - its urban fabric - affects most activities their residents undertake, from accessing services or jobs to their social and cultural lives. Analysing the interplay of urban form, land use, mobility and other dimensions of human activities provides insights into how cities evolve and what effective developmental policies should look like. Researchers in the field of urban morphology have spend years in identifying, classifying and analysing the variations in urban form across cities from all over the world. A core new development, powered by advancements in spatial data science, computer vision, and open data availability, are the methodologies created to computationally discern and analyse urban fabric [@fleischmann2022methodological]. Taken together, these facts have opened up the possibility of a more systematic and comprehensive approach to the classification of urban morphological patterns, which in turn can drive our understanding of cities [@calafiore2023inequalities ; @arribas2022spatial].

One factor that limits the wider application of these methods is their dependency on high-quality data, that is generally not available for every city. For example, [@fleischmann2022methodological ; @arribas2022spatial] use building polygons from the respective municipal and national mapping agencies. However, such data is not generally available even for most high-income countries. And where available, it can come in various formats and the data itself is not necessarily homogenous, which makes its processing difficult. For example, official Czechia cadastral building polygons (https://services.cuzk.cz/) come as a GeoPackage, with no information about building age, height, type or use. In contrast,  official German building polygons, come separately for every state , typically but not always as GML data from a WFS service, and sometimes have extra building information. However, the definition of building is different to Czechia and the polygon set may include parts of tunnels, overpasses or tram lines. These definitions are even sometimes different in the cases of cities within the same country - i.e. the data for Berlin and Hamburg is different from the data available for Bremen.

EuroFab aims to address the data availability and processing issues, as well as broaden the applicability of urban morphometrics. It does this through the development of a predictive urban morphometric model which uses widely available building footprints to infer structure of urban form. The model input is calculated directly on satellite-derived building footprints, which gives it a global scope and thus eliminates the need the data fusion problems described above. Furthermore, it is trained on a detailed morphometric classification derived from official cadastre data in a large study area that covers multiple countries - Poland, Austria, Czechia, Germany and Slovakia, i.e. Central Europe. The heterogeneity of urban form and planning regimes present in the study area enables the model to distinguish a rich variety of urban patterns and improves it generalisability.

The specific approach taken has four stages. In the first stage morphological elements and their characteristics are calculated using the widely available Microsoft building and Overture Maps Transportation data. These elements are the predictor variables that the model will use. To achieve this we develop a highly-scalable polygon and street data pipeline, capable of calculating an exhaustive list of morphometric characteristics. In the second stage, each element, calculated in the first stage, is assigned a target classification label based on spatial overlap with morphological elements from [@primus]. [@primus] is a classification of urban fabrics in Central Europe based on the highest-detail available cadastre data. Third, the data is then split into training and testing subsets based on spatial contiguity, in order to account for spatial leakage. Lastly, a series of non-linear models is trained to predict the morphological classification of individual elements, using a custom validation schema. This is required in order to emphasise the model's ability to deal with previously unseen data and new urban fabric types in the evaluation. The best performing model is chosen as the final production model, and retrained on the whole dataset.

<!--Satellite derived building footprints intro-->
Satellite derived building footprints are becoming more widely adopted, however, the data does not come without issues. For example, in dense urban centres entire blocks can be delineated as individual buildings. Given that morphology calculations rely on precise local topological relations between neighbours, such as two buildings touching, this problem renders a whole number of possible measurements described in [@fleischmann2021measuring] meaningless. Furthermore, this issue affects even simpler calculations such as counting the number of buildings within a radius or topological neighbourhood. Other issues are that computer vision techniques sometimes miss entire buildings or misidentify building boundaries. Therefore, any approach that uses satellite-derived building footprints should be able to account for these three and potentially other problems.


Implementing these stages, and further realising the potential of the model for global application, requires the creation of novel, scalable data processing pipelines capable of analysing hundreds of millions of morphological elements - buildings, streets and their derivatives. Due to their scalability, these pipelines can further be reused for other work, outside of the immediate scope of this projects. To ensure maximum impact and high standards, all work for this project follows open science principles and is open-sourced on GitHub.

## AI Modelling using Satellite Imagery

A brief theoretical background.

# Algorithm Design

## Morphometric Classification Homogenisation

### Model architecture

The model architecture consists of the two main components: 1) derivation of predictive variables, and 2) development of the predictive model. Given the target of the prediction is morphological classification, we use morphometric measurements based on the sub-standard satellite-derived data as predictive variables, as they are conceptually related - the original target classification is a result of unsupervised learning on top of morphometric measurements based on cadastral data. The model's main job is then to capture the shift of meaning of individual characters from the original, when measured on precise geometries, to the derived one, measured on imperfect representation of urban form. Given the model will eventually perform a prediction out of the sample, we further build in a logic identifying the types of urban form it has not seen previously and ingesting then manually in the original taxonomy, forming an iterative feedback loop. The whole system is illustrated in a Figure XXX (TODO).

TODO: ADD A DIAGRAM OF THE WHOLE THING, INCLUDING THE FEEDBACK LOOP.

The data preparation and model training consists of four stages. The first and second stages cover the morphometric characterisation, which acts as the model's predictor variables, and the target variables generation. The third stage randomly splits the whole study area into model training and testing data taking into account spatial contiguity. The final stage is the model training and evaluation, based on a framework in which we empahsize the ability to flag unseen urban fabric types in five different scenarios. The full model training and evaluation framework will be implemented using scikit-learn pipelines.

### Data preprocessing

#### Building preprocessing

All available Microsoft building footprints for the study area are used for the analysis. Typically, building polygons required for morphological studies have to be of very high quality. For example, building polygons overlapping by a thousandth of a millimetre  break topological contiguity and therefore affect the calculation of morphological properties, such as the ratio of shared walls, or the number of adjacent buildings. Furthermore, even the highest quality available software suffers from numerical precision issues which exasperate the above problem. Another potential issue is the inclusion of artefacts we are not directly interested in such as sheds or market stalls. Most importantly, polygons shall represent individual buildings, not compounds of buildings that are adjacent. The footprints used for this study fall short of these standards. Therefore, our approach aims to accommodate less than ideal data and methods, first by processing the building data, and second, by adapting the morphological calculations to account for numerical issues.

![Comparison between MS buildings and cadastre level buildings in central Prague](../figures/algo_design/building_comparison.png){.nostretch fig-align="center" height="400"}

Before dealing with any morphological assessment, the polygons need to undergo basic topological preprocessing.

The first step in the building data processing is to split up multi-polygons and make the geometries valid. The second step, is to simplify the polygons in order to accurately represent the corners of buildings and other shape related characteristics. Next, to filter out any buildings that have an area larger than 200,000 sq.m. This is done since some artefacts such as construction sites, mines or tunnels might be included in the data as buildings. The next step is to merge overlapping buildings that either: overlap for at least 10 percent of their areas, or one of them has less than 50 sq.m. in total area. This is done to merge buildings and building parts, since cadastre definitions of these two polygon types are inconsistent and sometimes buildings are assigned as building parts or vice versa. This step merges the buildings and its parts into one polygon. Finally, the preprocessing pipeline snaps nearby buildings together and fills gaps in the polygons that are less than 10 square cm. These two steps aim to address some common topological issues, such as missing slivers with almost zero areas between multiple or inside individual building polygons. Nevertheless, even after the preprocessing numerous topological issues remain and therefore we take this into account in subsequent analysis steps.

#### Overture Streets

The street network is a direct download from Overture Maps Transportation theme, a processed subset of data from OpenStreetMap, which has global coverage and high quality data. Since the dataset includes multiple segments types, including footpaths, the types of segments used in the analysis are limited to ... . Another type of segment that is filtered out are tunnels - the analysis strictly focuses on two dimensions and therefore undergrounds structures adversely affect the calculation of boundaries and characters.

The second major stage of the street processing is the simplification of the entire street network for each subregion. The actual physical layout of the street is not important to the study - the number of lanes for example, or the exact structure of roundabouts. Rather, the focus is on the topological properties of the street network such as connections, as well as general physical characteristics such as lengths and widths. Therefore the overture street network is further processed by eliminating false nodes, combining lanes and simplifying roundabouts.
<!--- TODO this needs more explanation-->

![Streets in central Prague](../figures/algo_design/street_processing.png){.nostretch fig-align="center" height="400"}

### Morphometric characterisation

The morphometric characterisation is directly derived from the method of [@primus] as closely as possible to ensure that we minimise the conceptual differences between the methodological backbone using the derivation of the target classification and the the data used within our model.

#### Subregions split

Since the study area of interest is large and contains tens of millions of buildings, it is divided into subregions to carry out all computation. The separation is done based on distances between buildings - buildings are split into subregions such that the building from one region and its closest neighbour (another building) from another region are at least 400 meters apart. This custom separation, rather than official administrative divisions, ensures that all elements that may affect morphological calculations are in the same set (subregion) and not split across political boundaries. All processing and character calculations are done for each region independently and in parallel.

![All subregions in the study area](../figures/algo_design/subregions.png){.nostretch fig-align="center" height="400"}

#### Elements and units

There are five morphological elements used for the morphometric characterisation - two base ones - buildings and streets and three derived ones - enclosures, nodes, enclosed tessellation cells (ETC). Buildings and streets are the two elements from which all other units are derived. The core unit of analysis in the study is the enclosed tessellation cell, which breaks down the whole study area into small-scale units, which when taken together fully cover the area.

##### Nodes

The first type of derived element in the study are street nodes, which are defined as the intersection points between different streets. They are used to calculate characteristics of the street network that capture relationships between streets such as number of intersections, as well as relationships between neighbouring enclosures and ETCs.

![Nodes in central Prague](../figures/algo_design/nodes.png){.nostretch fig-align="center" height="400"}

##### Enclosures

Enclosures capture the characteristics of plots of land that contain  from none to (usually) multiple buildings. They are operationalised as land delineations, surrounded by streets and other physical barriers, which can vary in size depending on the geographic context.  If an area is in the city centre, each enclosure would approximate a single block and multiple building units, however if it was in an industrial area it would potentially encompass a single, or very few large buildings.  In this study, only the street network is used for barriers to minimise the data dependency. Furthermore, enclosures are used to delineate the boundaries of enclosed tessellation cells to the surrounding streets - i.e. representing physical barriers.

In this study, enclosure delineation is further modified by introducing a variable, individual bandwidth for every building, as opposed to the global one used by [@fleischmann2022methodological] or none using in generic enclosure delineation. This is done to limit the boundaries effects around the edges of cities and towns - i.e. cells on the edges of cities in [@fleischmann2022methodological] are always large because there are no surrounding buildings and their cells resemble those of large buildings with lots of empty space around them. The limits used here are calculated through a Gabriel graph-based filtration of the subregion, which takes into account the surrounding neighbours structure around every ETC. For example, in  row housing the buffer will be relatively small, in single family housing estates the buffer will be larger, and in industrial areas larger still; regardless of whether or not these buildings are in the middle of cities or around their edges. The detailed technical implementation is out of scope of this Technical Note.

![Enclosures in central Prague](../figures/algo_design/enclosures.png){.nostretch fig-align="center" height="400"}

##### Enclosed Tessellation Cells

Enclosed Tessellation Cells are the core unit used for the analysis and the one used to combine aspects of all of the other four elements. To operationalise it, the study follows the definition by [@fleischmann2022methodological] - “the portion of space that results from growing a morphological tessellation within an enclosure delineated by a series of natural or built barriers identified from the literature on urban form, function and perception”, where the morphological tessellation is a delineation of the space based on Voronoi polygons centred around buildings. The boundaries of ETCs also represent the closest area of land to each building, than to any other building within an enclosure. Because of this feature, ETCs intersect with all other elements and are the unit that links together the characteristics of the four other elements. In some cases, if there are no buildings within the enclosure the whole enclosure is treated as an 'empty' tessellation cell.

![Enclosed tessellation cells in central Prague](../figures/algo_design/tessellations.png){.nostretch fig-align="center" height="400"}

##### Morphometric Characters

Characteristics describing the interactions of these elements, and the elements themselves are calculated at three scales: small - covering only aspects of the element; medium - covering aspects of the element and neighbouring elements and large - covering neighbouring elements up to five topological neighbours. In total there are 52 morphometric characters calculated described in the list below, which come directly from the list of characters used to derive the target classification.

1. **Area of a building** is denoted as

(@eq_sdbAre)  $a_{blg}$

and defined as an area covered by a building footprint in m^2^ .

2. **Perimeter of a building** is denoted as

(@eq_sdbPer) $p_{blg}$

and defined as the sum of lengths of the building exterior walls in m.

3. **Courtyard area of a building** is denoted as

(@eq_sdbCoA)  $a_{blg_c}$

and defined as the sum of areas of interior holes in footprint polygons in m^2^.

4. **Circular compactness of a building** is denoted as

(@eq_ssbCCo)  $CCo_{blg} = \frac{a_{blg}}{a_{blgC}}$

where $a_{blgC}$ is an area of minimal enclosing circle. It captures the relation of building footprint shape to its minimal enclosing circle, illustrating the similarity of shape and circle [@dibble2017].

5. **Corners of a building** is denoted as

(@eq_ssbCor)  $Cor_{blg} = \sum_{i=1}^{n}{c_{blg}}$

where $c_{blg}$ is defined as a vertex of building exterior shape with an angle between adjacent line segments $\leq$ 170 degrees. It uses only external shape (`shapely.geometry.exterior`), courtyards are not included. Character is adapted from [@steiniger2008] to exclude non-corner-like vertices.

6. **Squareness of a building** is denoted as

(@eq_ssbSqu) $Squ_{blg} =  \frac{\sum_{i=1}^{n} D_{c_{blg_i}}}{n}$

where $D$ is the deviation of angle of corner $c_{blg_i}$ from 90 degrees and $n$ is a number of corners.

7. **Equivalent rectangular index of a building** is denoted as

(@eq_ssbERI) $ERI_{blg} =  \sqrt{{a_{blg}} \over {a_{blgB}}} * {p_{blgB} \over p_{blg}}$

where $a_{blgB}$ is an area of a minimal rotated bounding rectangle of a building (MBR) footprint and $p_{blgB}$ its perimeter of MBR. It is a measure of shape complexity identified by @basaraner2017 as the shape characters with the best performance.

8. **Elongation of a building** is denoted as

(@eq_ssbElo) $Elo_{blg} =  \frac{l_{blgB}}{w_{blgB}}$

where $l_{blgB}$ is length of MBR and $w_{blgB}$ is width of MBR. It captures the ratio of shorter to the longer dimension of MBR to indirectly capture the deviation of the shape from a square [@schirmer2015].

9. **Centroid - corner distance deviation of a building** is denoted as

(@eq_ssbCCD) $CCD_{blg} =  \sqrt{\frac{1}{n} \sum_{i=1}^{n}\left(ccd_{i}-\bar{ccd}\right)^{2}}$

where $ccd_i$ is a distance between centroid and corner $i$ and $\bar{ccd}$ is mean of all distances. It captures a variety of shape. As a corner is considered vertex with angle < 170º to reflect potential circularity of object and topological imprecision of building polygon.

10. **Centroid - corner mean distance of a building** is denoted as

(@eq_ssbCCM) $CCM_{blg} =\frac{1}{n}\left(\sum_{i=1}^{n} ccd_{i}\right)$

where $ccd_i$ is a distance between centroid and corner $i$. It is a character measuring a dimension of the object dependent on its shape  [@schirmer2015].

11. **Longest axis length of a tessellation cell** is denoted as

(@eq_sdcLAL) $LAL_{cell} = d_{cellC}$

where $d_{cellC}$ is a diameter of the minimal circumscribed circle around the tessellation cell polygon. The axis itself does not have to be fully within the polygon. It could be seen as a proxy of plot depth for tessellation-based analysis.

12. **Area of a tessellation cell** is denoted as

(@eq_sdcAre)  $a_{cell}$

and defined as an area covered by a tessellation cell footprint in m^2^.

13. **Circular compactness of a tessellation cell** is denoted as

(@eq_sscCCo)  $CCo_{cell} = \frac{a_{cell}}{a_{cellC}}$

where $a_{cellC}$ is an area of minimal enclosing circle. It captures the relation of tessellation cell footprint shape to its minimal enclosing circle, illustrating the similarity of shape and circle.

14. **Equivalent rectangular index of a tessellation cell** is denoted as

(@eq_sscERI) $ERI_{cell} =  \sqrt{{a_{cell}} \over {a_{cellB}}} * {p_{cellB} \over p_{cell}}$

where $a_{cellB}$ is an area of the minimal rotated bounding rectangle of a tessellation cell (MBR) footprint and $p_{cellB}$ its perimeter of MBR. It is a measure of shape complexity identified by @basaraner2017 as a shape character of the best performance.

15. **Coverage area ratio of a tessellation cell** is denoted as

(@eq_sicCAR) $CAR_{cell} = \frac{a_{blg}}{a_{cell}}$

where $a_{blg}$ is an area of a building and $a_{cell}$ is an area of related tessellation cell [@schirmer2015]. Coverage area ratio (CAR) is one of the commonly used characters capturing *intensity* of development. However, the definitions vary based on the spatial unit.

16. **Floor area ratio of a tessellation cell** is denoted as

(@eq_sicFAR) $FAR_{cell} = \frac{fa_{blg}}{a_{cell}}$

where $fa_{blg}$ is a floor area of a building and $a_{cell}$ is an area of related tessellation cell. Floor area could be computed based on the number of levels or using an approximation based on building height.

17. **Length of a street segment** is denoted as

(@eq_sdsLen) $l_{edg}$

and defined as a length of a `LineString` geometry in metres [@dibble2017; @gil2012].

18. **Width of a street profile** is denoted as

(@eq_sdsSPW) $w_{sp} = \frac{1}{n}\left(\sum_{i=1}^{n} w_{i}\right)$

where $w_{i}$ is width of a street section i. The algorithm generates street sections every 3 meters alongside the street segment, and measures mean value. In the case of the open-ended street, 50 metres is used as a perception-based proximity limit [@araldi2019].


19. **Openness of a street profile** is denoted as

(@eq_sdsSPO) $Ope_{sp} = 1 - \frac{\sum hit}{2\sum sec}$

where $\sum hit$ is a sum of section lines (left and right sides separately) intersecting buildings and $\sum sec$ total number of street sections. The algorithm generates street sections every 3 meters alongside the street segment.

20. **Width deviation of a street profile** is denoted as

(@eq_sdsSWD) $wDev_{sp} = \sqrt{\frac{1}{n} \sum_{i=1}^{n}\left(w_{i}-w_{sp}\right)^{2}}$

where $w_{i}$ is width of a street section i and $w_{sp}$ is mean width. The algorithm generates street sections every 3 meters alongside the street segment.

21. **Linearity of a street segment** is denoted as

(@eq_sssLin) $Lin_{edg} = \frac{l_{eucl}}{l_{edg}}$

where $l_{eucl}$ is Euclidean distance between endpoints of a street segment and $l_{edg}$ is a street segment length. It captures the deviation of a segment shape from a straight line. It is adapted from @araldi2019.

22. **Area covered by a street segment** is denoted as

(@eq_sdsAre) $a_{edg} = \sum_{i=1}^{n} a_{cell_i}$

where $a_{cell_i}$ is an area of tessellation cell $i$ belonging to the street segment. It captures the area which is likely served by each segment.

23. **Buildings per meter of a street segment** is denoted as

(@eq_sisBpM) $BpM_{edg} = \frac{\sum blg}{l_{edg}}$

where $\sum blg$ is a number of buildings belonging to a street segment and $l_{edg}$ is a length of a street segment. It reflects the granularity of development along each segment.

24. **Area covered by a street node** is denoted as

(@eq_sddAre) $a_{node} = \sum_{i=1}^{n} a_{cell_i}$

where $a_{cell_i}$ is an area of tessellation cell $i$ belonging to the street node. It captures the area which is likely served by each node.

25. **Shared walls ratio of adjacent buildings** is denoted as

(@eq_mtbSWR) $SWR_{blg} = \frac{p_{blg_{shared}}}{p_{blg}}$

where $p_{blg_{shared}}$ is a length of a perimeter shared with adjacent buildings and $p_{blg}$ is a perimeter of a building. It captures the amount of wall space facing the open space [@hamaina2012a].

26. **‌Mean distance to neighbouring buildings** is denoted as

(@eq_mtbNDi) $NDi_{blg} = \frac{1}{n} \sum_{i=1}^{n} d_{blg, blg_i}$

where $d_{blg, blg_i}$ is a distance between building and building $i$ on a neighbouring tessellation cell. It is adapted from @hijazi2016. It captures the average proximity to other buildings.

27. **Weighted neighbours of a tessellation cell** is denoted as

(@eq_mtcWNe) $WNe_{cell} = \frac{\sum cell_n}{p_{cell}}$

where $\sum cell_n$ is a number of cell neighbours and $p_{cell}$ is a perimeter of a cell. It reflects granularity of morphological tessellation.

28. **Area covered by neighbouring cells** is denoted as

(@eq_mdcAre) $a_{cell_n} = \sum_{i=1}^{n} a_{cell_i}$

where $a_{cell_i}$ is area of tessellation cell $i$ within topological distance 1. It captures the scale of morphological tessellation.

29. **Reached cells by neighbouring segments** is denoted as

(@eq_misRea) $RC_{edg_n} = \sum_{i=1}^{n} cells_{edg_i}$

where $cells_{edg_i}$ is number of tessellation cells on segment $i$ within topological distance 1. It captures accessible granularity.

30. **Reached area by neighbouring segments** is denoted as

(@eq_mdsAre) $a_{edg_n} = \sum_{i=1}^{n} a_{edg_i}$

where $a_{edg_i}$ is an area covered by a street segment $i$ within topological distance 1. It captures an accessible area.

31. **Degree of a street node** is denoted as

(@eq_mtdDeg) $deg_{node_i} = \sum_{j} edg_{i j}$

where $edg_{i j}$ is an edge of a street network between node $i$ and node $j$. It reflects the basic degree centrality.

32. **Mean distance to neighbouring nodes from a street node** is denoted as

(@eq_mtdMDi) $MDi_{node} = \frac{1}{n} \sum_{i=1}^{n} d_{node, node_i}$

where $d_{node, node_i}$ is a distance between node and node $i$ within topological distance 1. It captures the average proximity to other nodes.

33. **Reached cells by neighbouring nodes** is denoted as

(@eq_midRea) $RC_{node_n} = \sum_{i=1}^{n} cells_{node_i}$

where $cells_{node_i}$ is number of tessellation cells on node $i$ within topological distance 1. It captures accessible granularity.

34. **Reached area by neighbouring nodes** is denoted as

(@eq_midAre) $a_{node_n} = \sum_{i=1}^{n} a_{node_i}$

where $a_{node_i}$ is an area covered by a street node $i$ within topological distance 1. It captures an accessible area.

35. **Number of courtyards of adjacent buildings** is denoted as

(@eq_libNCo) $NCo_{blg_{adj}}$

where $NCo_{blg_{adj}}$ is a number of interior rings of a polygon composed of footprints of adjacent buildings [@schirmer2015].

36. **Perimeter wall length of adjacent buildings** is denoted as

(@eq_ldbPWL) $p_{blg_{adj}}$

where  $p_{blg_{adj}}$ is a length of an exterior ring of a polygon composed of footprints of adjacent buildings.

37. **Mean inter-building distance  between neighbouring buildings** is denoted as

(@eq_ltbIBD) $IBD_{blg} = \frac{1}{n} \sum_{i=1}^{n} d_{blg, blg_i}$

where $d_{blg, blg_i}$ is a distance between building and building $i$ on a tessellation cell within topological distance 3. It is adapted from @caruso2017. It captures the average proximity between buildings.

38. **‌Building adjacency of neighbouring buildings** is denoted as

(@eq_ltcBuA) $BuA_{blg} = \frac{\sum blg_{adj}}{\sum blg}$

where $\sum blg_{adj}$ is a number of joined built-up structures within topological distance three and $\sum blg$ is a number of buildings within topological distance 3. It is adapted from @vanderhaegen2017.

39. **Weighted reached blocks of neighbouring tessellation cells** is denoted as

(@eq_ltcWRB) $WRB_{cell} = \frac{\sum blk}{\sum_{i=1}^{n} a_{cell_i}}$

where $\sum blk$ is a number of blocks within topological distance three and $a_{cell_i}$ is an area of tessellation cell $i$ within topological distance three.

40. **Local meshedness of a street network** is denoted as

(@eq_ldcMes) $Mes_{node}= \frac{e-v+1}{2 v-5}$

where $e$ is a number of edges in a subgraph, and $v$ is the number of nodes in a subgraph [@feliciotti2018]. A subgraph is defined as a network within topological distance five around a node.

41. **Mean segment length of a street network** is denoted as

(@eq_ldsMSL) $MSL_{edg} = \frac{1}{n} \sum_{i=1}^{n} l_{edg_i}$

where $l_{edg_i}$ is a length of a street segment $i$ within a topological distance 3 around a segment.

42. **Cul-de-sac length of a street network** is denoted as

(@eq_ldsCDL) $CDL_{node} = \sum_{i=1}^{n} l_{edg_i}, \text { if }edg_i \text { is cul-de-sac}$

where $l_{edg_i}$ is a length of a street segment $i$ within a topological distance 3 around a node.

43. **Reached cells by street network segments** is denoted as

(@eq_ldsRea) $RC_{edg} = \sum_{i=1}^{n} cells_{edg_i}$

where $cells_{edg_i}$ is number of tessellation cells on segment $i$ within topological distance 3. It captures accessible granularity.

44. **Node density of a street network** is denoted as

(@eq_lddNDe) $D_{node} = \frac{\sum node}{\sum_{i=1}^{n} l_{edg_i}}$

where $\sum node$ is a number of nodes within a subgraph and $l_{edg_i}$ is a length of a segment $i$ within a subgraph. A subgraph is defined as a network within topological distance five around a node.

45. **Reached cells by street network nodes** is denoted as

(@eq_lddRea) $RC_{node_{net}} = \sum_{i=1}^{n} cells_{node_i}$

where $cells_{node_i}$ is number of tessellation cells on node $i$ within topological distance 3. It captures accessible granularity.

46. **Reached area by street network nodes** is denoted as

(@eq_lddARe) $a_{node_{net}} = \sum_{i=1}^{n} a_{node_i}$

where $a_{node_i}$ is an area covered by a street node $i$ within topological distance 3. It captures an accessible area.

47. **Proportion of cul-de-sacs within a street network** is denoted as

(@eq_linPDE) $pCD_{node} = \frac{\sum_{i=1}^{n} node_i, \text { if }deg_{node_i} = 1}{\sum_{i=1}^{n} node_i}$

where $node_i$ is a node whiting topological distance five around a node. Adapted from [@boeing2017a].

48. **Proportion of 3-way intersections within a street network** is denoted as

(@eq_linP3W) $p3W_{node} = \frac{\sum_{i=1}^{n} node_i, \text { if }deg_{node_i} = 3}{\sum_{i=1}^{n} node_i}$

where $node_i$ is a node whiting topological distance five around a node. Adapted from [@boeing2017a].

49. **Proportion of 4-way intersections within a street network** is denoted as

(@eq_linP4W) $p4W_{node} = \frac{\sum_{i=1}^{n} node_i, \text { if }deg_{node_i} = 4}{\sum_{i=1}^{n} node_i}$

where $node_i$ is a node whiting topological distance five around a node. Adapted from [@boeing2017a].

50. **Weighted node density of a street network** is denoted as

(@eq_linWID) $wD_{node} = \frac{\sum_{i=1}^{n} deg_{node_i} - 1}{\sum_{i=1}^{n} l_{edg_i}}$

where $deg_{node_i}$ is a degree of a node $i$ within a subgraph and $l_{edg_i}$ is a length of a segment $i$ within a subgraph. A subgraph is defined as a network within topological distance five around a node.

51. **Local closeness centrality of a street network** is denoted as

(@eq_lcnClo) $lCC_{node} = \frac{n - 1}{\sum_{v=1}^{n-1} d(v, u)}$

where $d(v, u)$ is the shortest-path distance between $v$ and $u$, and $n$ is the number of nodes within a subgraph. A subgraph is defined as a network within topological distance five around a node.

52. **Square clustering of a street network** is denoted as

(@eq_xcnSCl) $sCl_{node} = \frac{\sum_{u=1}^{k_{v}} \sum_{w=u+1}^{k_{v}} q_{v}(u, w)}{\sum_{u=1}^{k_{v}} \sum_{w=u+1}^{k_{v}}\left[a_{v}(u, w)+q_{v}(u, w)\right]}$

where $q_v(u,w)$ are the number of common neighbours of $u$ and $w$ other than $v$ (ie squares), and $a_v(u,w) = (k_u - (1+q_v(u,w)+\theta_{uv}))(k_w - (1+q_v(u,w)+\theta_{uw}))$,
where $\theta_{uw} = 1$ if $u$ and $w$ are connected and 0 otherwise [@PhysRevE.72.056127].


### Target labels

For the second stage, we assign a target classification label to every ETC derived using the satellite-derived polygons. This is done based on spatial intersection between EuroFab and [@primus] ETCs. In cases where there are multiple detailed tessellation cells that fall within the range of a single EuroFab ETC, the label is decided based on majority.

Since the final output of [@primus] is a hierarchy, rather than a flat clustering there are several options how to pick the specific target labels. Generally, clusters lower in the hierarchy represent classifications of urban fabrics at more granular scales. For example, depending on the hierarchy cutoff point historical urban areas can be one cluster, or can be separated into two - medieval and industrial-era urban fabrics.

The specific selection of cutoff points will follow [@primus]. The first set of urban fabrics we will aim to predict, broadly differentiates - different types of houses; from heterogenous historical urbanised areas; from recent modern urban developments such as apartment blocks and commercial areas; from large industrial areas. 

![High-level urban fabrics](../figures/algo_design/prague_600.png){.nostretch fig-align="center" height="400"}

The second set breaks down each of the first sets into multiple subsets. It goes into more detail and splits the houses into more classes, based on features such as size and proximity to cities; it also splits the historical areas based on origin - medieval, industrial-era and others; the modern urban developments into subclasses such as different types of modernist apartment blocks, commercial areas, offices and others; and the several industrial area types. By analysing the model performance across two different hierarchical levels, we will understand what is the highest resolution detail the model can predict, given the shortcomings of the data and which factors affect predictions.

![More detailed urban fabrics](../figures/algo_design/prague_400.png){.nostretch fig-align="center" height="400"}

### Train/test/validation split

After assigning the target labels, we create a schema that will dictate how to split the data into a training and testing subsets for the classification models. Random subsetting does not work for this study, since we need to account for spatial dependency and the related data leakage between train and test data. The spatial leakage comes from both the nature of the data - spatial contiguity is one of the core aspects of morphological elements - but also from the way characters are calculated based on various nearest topological neighbours.

To account for this, we aggregate nearby ETCs into higher granularity spatial units - level 5 H3 cells - and randomly split the these units into 80% train and 20% test data, based on contiguity. This ensures that the majority of the test set ETCs and their neighbours are not present in the training data and no morphological characters related to them affect the training set. We use level 5 H3 cells, which represent a delineation of the globe into hexagons with approximately 250 sq. km. area, rather than enclosures or ETC contiguity, to ensure that contiguous subsets of test data cover areas of heterogenous elements and present the model with a realistic validation scenario. This process is done once for the whole study area, before training any models.

![Example of the train test split](../figures/algo_design/train_test_prague.png){.nostretch fig-align="center" height="400"}

![Zoomed in example](../figures/algo_design/train_test_prague_zoom2.png){.nostretch fig-align="center" height="400"}

### Training and validation

<!--why classification and tree based methods-->
The main aim of the modelling task is to generate a classification of morphological elements of similar quality to [@primus] given the data quality limitations, albeit flat, not hierarchical. To achieve this we create an evaluation framework for the selection of non-linear tree-based models like a random forest classifier or an XGBoost model. We use the satellite-derived ETCs and their characteristics as input data and the clusters from [@primus] as target labels for a classification task. The choice of tree-based learning models is due to their readily available implementations, high scalability and ability to quickly offer interpretation insights. Furthermore, they handle well high dimensional data, non-linear interactions and require minimal hyper-parameter tuning. The flexibility of the models and the specific training/testing framework setup will allow us to not just produce a predictive model but also to identify potential areas for improvement in the original data preprocessing.

<!--out of sample importance-->
Since we want the final production model to be general and applicable to large areas i.e. whole continents, it needs to be able to handle previously unseen urban fabric types. For example, an urban morphology type that is present in the test data, or in another study area, might not be present in the training data and in that case the model should flag its predicted label as uncertain. This is another area where tree models have an advantage, since they are ensemble methods and this can help reduces their tendency to overfit. They also readily provide a confidence score for each prediction which can be used to flag unseen data. Furthermore, we take extra care to evaluate the final production models performance in realistic scenarios and the relationship between its accuracy on test data and whole countries that are not part of the model training or test data.

<!--evaluation setup-->
To achieve this we train five iterations of each model on different subsets of the study area - so that that every country and every combination of countries is used as final hold-out validation data a and train/test pipeline respectively. For example, one iteration will use Germany, Poland, Czechia and Austria as part of its train/test pipeline, whereas Slovakia will be used as the hold-out data , in order to see the relationship between the final test score from the train/test pipeline and the models realistic performance on a whole unseen country's urban fabric. The data from the four countries in each train/test pipeline will be separated into training and test sets based on the spatial strategy described previously. The model training and evaluation will follow standard best practices - model coefficients and hyper parameter tuning, such as the decision threshold will be optimised based on the training subset, and the test subset will be used to give a final model accuracy score. Specifically, the models will use balanced accuracy as the optimisation metric in order to account for imbalances in the distribution of urban fabric classes. Our framework further extends the best practices with an additional layer of testing using the hold-out country for each train/test pipeline. All of the data in the hold-out country is used to score the model's performance and the spatial train/test split will be ignored for that particular iteration.

TODO: DIAGRAM SHOWING THE EVAL SETUP

This acts as an extra check against overfitting and ultimately enable us to see how the final production model will perform in realistic scenarios - applying it to whole countries which are not used for the training or testing at all. This comes with at least two advantages over simply reporting a test score on a random sample. First, it is a test of model performance on a dataset that does not have any spatial leakage with the training or testing data. Second, it ensures that we evaluate model performance on unseen urban fabric types from other countries. We can afford to do this in part due to the large size of the data we are working with. In every permutation there will be a rich variety of urban fabrics and tens of millions of ETCs used in the training part of each train/test pipeline.

The final production model is trained on the whole dataset, using the same hyper parameter grid search configuration and training/test spatial split.  The extra validation steps we carry out with the hold-out countries will be used to used in three ways. First, to contextualise the final models' accuracy on the test data; second, to indicate how the model will perform on other countries; and third to see how it handles urban fabric types not seen in the training or test data in a realistic scenario.

### Preliminary results

There are 56,845,150 Microsoft building footprints for our study area, which are split into 474 subregions. This is significantly less than the available cadastre data, which has around 88 million buildings and are separated into 828 regions TODO: EXPLAIN WHY. The number of downloaded, unprocessed streets is similar to those in [@primus] - 23,332,865 - since they cover the same study area and come from the same source - Overture Maps, which is a processed subset of OpenStreepMap. However, the number of tessellation cells is the same as the buildings and therefore less than the cadastre data-based classification. Furthermore, the street simplification algorithm is affected by the available buildings, and therefore in turn also affects the tessellation cell boundaries. These results highlight the effect of the satellite derived building footprints that have been discussed in the Technical Note D3 - the missing or wrongly merged building polygons. In turn these affect the third discussed issue - the interpretation of the values of the calculated morphological characters. Many characters from the original classification also completely lose their meaning. For example, the number of adjacent buildings in the EuroFab dataset is much smaller and therefore all characters based on adjacency have a much more limited utility. This also affects, to a relatively smaller, but nevertheless important extent, characters that rely on inter-building distances and counts.

These results further point towards the need for a non-linear classification model, cable of accounting for these data discrepancies.

## AI Modelling using Satellite Imagery

Most of the stuff from `technical_part_turing.qmd` except the data description.

### Data preprocessing

For our analysis, we use two datasets of image tiles at different scales: larger tiles (224 x 224 pixels, covering 2240 x 2240 meters) for segmentation tasks, and smaller tiles (56 x 56 pixels, covering 560 x 560 meters) for classification tasks. The segmentation dataset includes 26,753 tiles (21,402 for training and 5,351 for testing), while the classification dataset consists of 403,722 tiles (342,648 for training and 61,074 for testing). For consistent sampling and comparison, we only use tiles that fully overlap with the spatial signatures, ensuring that each tile aligns with the urban form and function typology in our labeling framework. This alignment supports robust comparison of classification and segmentation outcomes on a pixel-level.


![](../figures/algo_design/sampling.png){.nostretch fig-align="left" height="400"}


A significant challenge in our dataset is class imbalance, where certain urban fabric types are substantially more represented than others. This imbalance influenced our decisions regarding model architecture and loss function selection, leading us to explore specialized approaches for handling uneven class distributions.


### Train/test split

We split the dataset into 80% train and 20% test data. The test datasets for segmentation and classification overlap.

![](../figures/algo_design/train_df.png){.nostretch fig-align="left" height="400"}
![](../figures/algo_design/test_df.png){.nostretch fig-align="right" height="400"}


### Unbalanced dataset

![](../figures/algo_design/unbalanced.png){.nostretch fig-align="center" height="420"}

### Model architectures

As part of the AI model design, we tested three main experiments to analyze urban fabric classification and segmentation. First, we conduct a baseline experiment using image embeddings from the SatlasPretrain model [^3], which we fit to an XGBoost classifier to predict urban fabric classes (Approach A). Second, we fine-tune three different geospatial foundation models—SatlasPretrain, Clay, and IBM/NASA’s Prithvi model—to perform segmentation tasks (Approach B). Third, we take the best-performing geospatial foundation model from the segmentation experiments (Clay) and fine-tune it specifically for a classification task (Approach C). To evaluate and compare the results, we report weighted pixel-level accuracy, F1 score, and Intersection over Union (IoU) metrics across the experiments.

- Approach A: Image embeddings + XGBoost model
- Approach B: Fine-tuned geospatial foundation model (segmentation)
- Approach C: Fine-tuned geospatial foundation model (classification)

#### Baseline approach (Approach A)

The tiles are fed into the geospatial foundation model
SatlasPretrain [^3] that has been pretrained with more than 302 million labels on a range of remote sensing and computer vision tasks.

The model operates in two main steps:

1. Foundation Model: A vision transformer model with a feature pyramid network (FPN) and a pooling layer is used to derive image embeddings—lower-dimensional representations of the images (Fig. 2).
2. Machine Learning Classifier: The image embeddings are then input into an XGBoost classifier to predict urban fabric classes across England.

Our baseline model achieved a moderate prediction accuracy of approximately 61% with varying accuracy across the various spatial signature classes as seen in the figure below.

[^3]: Bastani, F. et al., 2023. Satlaspretrain: A large-scale dataset for remote sensing image understanding. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp. 16772-16782.


![](../figures/algo_design/baseline.png){.nostretch fig-align="center" height="400"}


#### Results across spatial signatures
![](../figures/algo_design/baseline_tile_level.png){.nostretch fig-align="center" height="420"}


*Baseline approach (ordinal)*

In addition to the general classification task, we explored an ordinal regression task to account for the continuous nature of the spatial signatures, which are not strictly categorical. We applied the following ordinal mapping:


`ordinal_mapping = {
    'Wild countryside': 0,
    'Countryside agriculture': 1,
    'Urban buffer': 2,
    'Open sprawl': 3,
    'Disconnected suburbia': 4,
    'Accessible suburbia': 5,
    'Warehouse/Park land': 6,
    'Gridded residential quarters': 7,
    'Connected residential neighbourhoods': 8,
    'Dense residential neighbourhoods': 9,
    'Dense urban neighbourhoods': 10,
    'Urbanity': 11,
}
`

This ordinal approach produced a Mean Absolute Error (MAE) and Mean Squared Error (MSE) of 0.28, along with an R² score of 0.62. The Sankey diagram below highlights the primary misclassifications, which tend to occur between similar classes.

![](../figures/algo_design/sankey.png){.nostretch fig-align="center" height="420"}


*Baseline approach + spatial context*

To enhance model performance, we incorporated spatial context, enabling the model to account for regional location. We included H3 Level 5 hexagon identifiers as a categorical variable, where each hexagon (approximately 560x560 meters) encompasses around 80 tiles.

![](../figures/algo_design/hex_level5.png){.nostretch fig-align="center" height="420"}


#### Segmentation (Approach B)

In Approach B, we fine-tuned a state-of-the-art geospatial foundation model for a segmentation task. We used the 224x224x3 image tiles as input.
We evaluated three state-of-the-art foundation models, each with unique characteristics as listed below:

| Model   | Architecture | Dataset Size | Image Sources | 
|---------|-------------|--------------|---------------|
| Satlas [^1] | SwinT       | 302M labels  | Sentinel-2    | 
| Clay   [^4] | MAE/ViT     | 70M labels   | Multiple+    | 
| Prithvi [^5] | MAE/ViT     | 250 PB      | Sentinel-2/Landsat |

+Multiple sources include Sentinel-2, Landsat, NAIP, and LINZ

[^4]: https://huggingface.co/made-with-clay/Clay
[^5]: https://huggingface.co/ibm-nasa-geospatial/Prithvi-100M

The following visualisations show the varying model configurations for the three different approaches tested for the segmentation task. The main difference is the varying backbone. 

#### Model A: Satlas
![](../figures/algo_design/satlas_model.png){.nostretch fig-align="center" width="600"}


#### Model B: Clay
![](../figures/algo_design/clay_model.png){.nostretch fig-align="center" width="600"}


#### Model C: Prithvi
![](../figures/algo_design/prithvi_model.png){.nostretch fig-align="center" width="600"}

After fine-tuning each foundation model for 10 epochs, we observed the following performance metrics:

| Metric | Satlas | Clay | Prithvi |
|--------|---------|--------|----------|
| Weighted Accuracy | 0.57 | **0.72** | 0.62 |
| Weighted IoU | 0.33 | **0.58** | 0.41 |
| Weighted F1 | 0.41 | **0.69** | 0.58 |
| Training Time/Epoch | 9 mins | 8 mins | 20 mins |
| Parameters | 90M | 86M | 120M |
| Implementation Score | 5/10 | 6/10 | 7/10 |

The Clay model consistently outperformed other foundation models across all metrics, while also maintaining reasonable training times and computational requirements.

**Loss Function Impact:** The choice of loss function significantly influenced model performance. Focal loss proved particularly effective in handling class imbalance, especially when combined with the Clay model architecture.


#### Classification (Approach C)

Finally, in Approach C, we fine-tuned a geospatial foundation model for a classification task. We used the 56x56x3 image tiles as input.

For this approach we only used the Clay model as backbone, since it performed the best in the previous experiments.

The accuracy varied across the different classes as seen in the figure below:

![](../figures/algo_design/class_acc.png){.nostretch fig-align="center" height="430"}


This figure shows a comparison between the predicted classes for the fine-tuned geospatial foundation model with segmentation approach (B) and the classification (C).

![](../figures/algo_design/comparison_B_C.png){.nostretch fig-align="center" height="430"}


### Evaluation Metrics

We employed multiple complementary metrics to evaluate model performance, as follows:

1. **Intersection over Union (IoU):** This metric measures the overlap between predicted and ground truth segmentations, ranging from 0 (no overlap) to 1 (perfect overlap). IoU is calculated as the area of intersection divided by the area of union between the predicted and actual segmentation masks.

2. **Weighted F1 Score:** This metric provides a balanced measure of precision and recall, particularly important for imbalanced datasets. It is calculated as the harmonic mean of precision (how many of the predicted positives are correct) and recall (how many of the actual positives were identified), weighted by class frequencies.

3. **Weighted Accuracy:** This metric calculates the proportion of correct predictions, weighted by class frequencies to account for class imbalance. It provides a more representative measure of model performance across all classes, regardless of their frequency in the dataset.


### Preliminary results
Comparing the results is a non-trivial task because the image tiles do not correspond to each other and do not perfectly overlap (42px vs 224 px). To make a fair comparison we thus calculate the pixel-level accuracy scores across the approaches. For this purpose, we predict the full map of the test set and compare the overlapping tiles (as described in sampling). We then calculate the following metrics on a per-pixel level.

#### Overall model performance comparison (Pixel-level)

Our comprehensive evaluation revealed varying levels of performance across the three different approaches:

| Approach | Global Accuracy | Macro Accuracy | F1 Score | IoU |
|----------|----------------|----------------|----------|-----|
| Classification (embeddings) | 0.76 (0.66) | 0.22 (0.13) | 0.23 | 0.63 |
| Classification + H3 level 5 | **0.87** (0.82) | **0.42** (0.35) | **0.45** | **0.79** |
| Classification + H3 ordinal | 0.80 (0.80) | 0.26 (0.26) | 0.26 | 0.69 |
| Classification (Clay) | 0.59 (0.68) | 0.09 | 0.12 | 0.38 |
| Segmentation (Clay) | 0.73 | 0.31 | 0.30 | 0.58 |


The baseline classification approaches demonstrated varying levels of success:
   - Basic embedding classification achieved 76% global accuracy (66% balanced)
   - Integration with H3 level 5 spatial indexing significantly improved performance to 87% global accuracy (42% balanced)
   - H3 level 5 ordinal classification reached 80% accuracy (26% balanced)

The fine-tuned geospatial foundation model performed better than the fine-tuned classification, with an accuracy score of 0.56 and 0.73 respectively. 

Overall, the baseline approach with regional information performed best. This approach is not only the best performing but also relatively efficient to implement. Once the image embeddings are created, the downstream classification can be done in minutes.

#### Prediction example: London

The following figure shows an example of a prediction for the London area using the whole dataset. Each colour represents a different signature. The background colour represents the ground truth.

![](../figures/algo_design/results_eurofab.png){.nostretch fig-align="center" height="420"}


# Final remarks and next steps